program             -> statement* EOF;

statement           -> expressionStatement
                    | printStatement;
                    | letStatement;
                    | blockStatement;



printStatement      -> "print" expression ";";
letStatement        -> "let" ":" TYPE IDENTIFIER "=" expression ";";
expressionStatement -> expression ";";
blockStatement      -> "{" statement* "}";


expression          -> equality;
equality            -> comparison ( ( "!=" | "==" ) comparison )*;
comparison          -> term ( ( ">" | ">=" | "<" | "<=" ) term )*;
term                -> factor ( ( "-" | "+" ) factor )*;
factor              -> primary ( ( "/" | "*" ) primary )*;
primary             -> NUMBER | IDENTIFIER;

TYPE                -> i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 
